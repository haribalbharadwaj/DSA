public int powerN(int base, int n) {
  if(n == 0) {
    return 1;
  }
  //i want 3^2 to be done automatically (PMI)
  for(int i = 1; i <= n) {
    
  }
  int spAns = powerN(base, n - 1);
  int spAns = powerN(base, n - 1);
  return base * spAns;
}
/*
BC -> if(n == 0) return 1;
BP -> P(3, 3) //3^3 = 27 P(base, n)
SP -> P(3, 2) //3^2 = 9  p(Base, n - 1);
MyAns -> 3 * SP;//   base * sp;
return SW;

a^m * a^n = a^(m + n)
a^0 = 1;
for(int i = 1; i <= n; i = i * 2) {
  
}
/*

2
4
8
16
32

5 times

2^K = N
K = logN
i = 1 => constant
O(1) + O(1) + O(1).. N times
O(N)

Time complexity => Recurrence Relatoins


Short Trick -> Time Complexity = time taken by 1 function call * total function calls
                               
           == O(N) * (2^n)
Total Functions calls = Number of calls inside a function ^height
for single function call

function() {
    function();
    functino();
    function()
    functoin()
}

1 -> 2

2 -> 4

3 -> 8
4 -> 16
5 -> 32


1 + 2 + 4 + 8 + 16 (4 level)
1 + 2^1 + 2^2 + 2^3 + 2^4  where K = 4
2^0 + 2^1 + 2^2 + 2^3 + 2^4

r = 2^3 / 2^2
r = 2
a^m / a^n = a^(m - n)
S(N) = a((r^n) - 1) / (r - 1)
s(N) = 1(2^n - 1)
S(N) = (2^n) - 1



[1, 2] = 2   2 * 3 = 6
[3, 4, 5] = 3
(1, 3) (1, 4) (1, 5)
(2, 3) (2, 4) (2, 5)



4 4 4 4

4 * 4 * 4 * 4 = 4^4

Recurrence Realtions

T(B, N) => T(B, N - 1) + O(K) -> 1
T(B, N - 1) => T(B, N - 2) + O(K) -> 2
T(B, N - 2) => T(B, N - 3) + O(K) -> 3
.....

T(B, 0) => O(K)  -> N

1 + 2 + 3....N equations

T(B, N) = O(K) + O(K) + O(K).... N times = O(N)

*/
